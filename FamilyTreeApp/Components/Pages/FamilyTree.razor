
@inject TreeDataService TreeData;
@implements IDisposable

@page "/familyTree"
@rendermode InteractiveServer

<PageTitle>FamilyTree</PageTitle>

@if (TreeData.RootNode == null)
{
    <p>No tree data loaded. Please upload a valid JSON file.</p>
}
else
{
    <div>
        <ul class= "tree-children">
            @InOrder(TreeData.RootNode)
        </ul>        
    </div>
}

@code {
    protected override void OnInitialized()
    {
        TreeData.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        TreeData.OnChange -= StateHasChanged;
    }
    private RenderFragment InOrder(FamilyTreeNode node) => builder =>
    {        
        Console.WriteLine("Building the tree...");

        if (node == null) return;
        
        int markupElementCount = 0;

        builder.OpenElement(markupElementCount++, "li");
        builder.AddAttribute(markupElementCount++, "class", "tree-node");
        builder.AddAttribute(markupElementCount++, _markupContext, "");

        builder.OpenElement(markupElementCount++, "a");
        builder.AddAttribute(markupElementCount++, "href", "#");
        builder.AddAttribute(markupElementCount++, "class", "tree-label");
        builder.AddAttribute(markupElementCount++, _markupContext, "");

        builder.AddContent(markupElementCount++, node.FullName);
        builder.CloseElement(); // </a>
        
        if (node.Children != null && node.Children.Any())
        {
            int childrenCount = node.Children.Count;
            
            builder.OpenElement(markupElementCount++, "ul");
            builder.AddAttribute(markupElementCount++, "class", "tree-children");
            builder.AddAttribute(markupElementCount++, _markupContext, "");

            for(int i = 0; i < childrenCount; i++) 
            {               
                if (node.Children == null) continue;
                builder.AddContent(markupElementCount++, InOrder(node.Children[i]));
            }

            builder.CloseElement(); // </ul>
        } 

        builder.CloseElement(); // </li>
    };
}

@code {    
    private string _markupContext = "b-5gjn933f37";
        
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(1000);

        InitializeTreeData();
    }

    private void InitializeTreeData()
    {
        //_rootNode = TreeData.RootNode;

        /*_rootNode = new FamilyTreeNode("İsmet ERTAŞ", "Grandfather", true);

        FamilyTreeNode child1 = new FamilyTreeNode("Elif Belkıs ERTAŞ", "Daughter 1", false);
        FamilyTreeNode child2 = new FamilyTreeNode("Deniz ERTAŞ", "Daughter 2", false);
        FamilyTreeNode child3 = new FamilyTreeNode("Yıldız ERTAŞ", "Daughter 3", false);
        FamilyTreeNode child4 = new FamilyTreeNode("Merih Nihan ERTAŞ", "Daughter 4", false);

        _rootNode.Children = new List<FamilyTreeNode>();
        _rootNode.Children.Add(child1);
        _rootNode.Children.Add(child2);
        _rootNode.Children.Add(child3);
        _rootNode.Children.Add(child4);

        FamilyTreeNode grandChild1 = new FamilyTreeNode("Can SİNOP", "Grand Son 1", false);
        FamilyTreeNode grandChild2 = new FamilyTreeNode("Esin SİNOP", "Grand Daughter 1", false);

        child1.Children = new List<FamilyTreeNode>();
        child1.Children.Add(grandChild1);
        child1.Children.Add(grandChild2);*/
    }
}
