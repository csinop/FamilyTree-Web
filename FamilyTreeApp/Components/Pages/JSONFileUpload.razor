@inject TreeDataService TreeData

@page "/jsonFileUpload"
@using System.Text.Json
@using System.Text
@rendermode InteractiveServer

<h1>Upload your JSON document:</h1>

<InputFile OnChange="HandleFileSelected" accept=".json" />

@if (!string.IsNullOrEmpty(_fileContent))
{
    <br><p><strong>File content:</strong></p>
   
    <div>        
        @if(_showInput) 
        {
            <div class="input-container" id="inputContainer">
                <textarea @bind="_fileContent" style="font-family: monospace;">@_fileContent</textarea>
            </div><br>
        }
        <div class="horizontal-container">
            <button class="toggle-btn" @onclick="HandleToggleButtonClick">Show</button>
            <button class="toggle-btn" @onclick="UpdateFamilyTree">💾 Save</button>
            @if (!string.IsNullOrEmpty(_downloadUrl))
            {
                <a href="@_downloadUrl"
                    download="FamilyTree_Modified.json"
                    class="download-button">
                    📥 Download
                </a>
            }
        </div>
    </div>
}

@code {
    private string? _fileContent;
    private string? _downloadUrl;
    private bool _showInput = true;
    private int _maxAllowedFileSize = 10 * 1024 * 1024;

    private void HandleToggleButtonClick() 
    {
        _showInput = !_showInput;
        Console.WriteLine("Click");
    }

    private void UpdateFamilyTree()
    {
        if (string.IsNullOrEmpty(_fileContent)) return;

        SaveJSONDocument();

        try
        {
            FamilyTreeNode? rootNode = JsonSerializer.Deserialize<FamilyTreeNode>(
                _fileContent,
                new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    WriteIndented = true
                }
            );

            if (rootNode != null) 
            {
                TreeData.SetRootNode(rootNode);
                Console.WriteLine("Changes have been saved.");
                return;
            }

            Console.WriteLine("RootNode could not be updated.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"JSON deserialization failed: {ex.Message}");
            TreeData.RootNode = null;
        } 
    }

    private void SaveJSONDocument()
    {
        if (string.IsNullOrEmpty(_fileContent)) return;

        byte[] bytes = Encoding.UTF8.GetBytes(_fileContent);
        string base64 = Convert.ToBase64String(bytes);
        _downloadUrl = $"data:application/json;base64,{base64}";
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;

        if (file == null || !file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
        {
            _fileContent = "Invalid file type. Please upload a .json file.";
            return;
        }

        using Stream stream = file.OpenReadStream(maxAllowedSize: _maxAllowedFileSize); // 10 MB
        using StreamReader reader = new StreamReader(stream);
        _fileContent = await reader.ReadToEndAsync();
        
        TreeData.UploadedJson = _fileContent;
        
        try
        {
            FamilyTreeNode? rootNode = JsonSerializer.Deserialize<FamilyTreeNode>(
                TreeData.UploadedJson,
                new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    WriteIndented = true
                }
            );

            if (rootNode != null) 
            {
                TreeData.SetRootNode(rootNode);
                Console.WriteLine("Read the json file.");
                return;
            }

            Console.WriteLine("RootNode could not be instanciated.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"JSON deserialization failed: {ex.Message}");
            TreeData.RootNode = null;
        }        
    }
}
